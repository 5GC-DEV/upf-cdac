# vim: syntax=py
# -*- mode: python -*-

from utils import *

# ====================================================
#       Parameters
# ====================================================


s1u_ifname = "s1u"
sgi_ifname = "sgi"

s1u_port_id = 0
sgi_port_id = 1

ue_net = "16.0.0.0"
ue_mask = "255.255.255.0"

enb_net = "11.1.1.0"
enb_mask = "255.255.255.0"

# ====================================================
#       Validate
# ====================================================


if validate_subnet('{}/{}'.format(ue_net, ue_mask)) is False:
    exit(1, 'Invalid UE subnet')

if validate_subnet('{}/{}'.format(enb_net, enb_mask)) is False:
    exit(1, 'Invalid eNB subnet')

# ====================================================
#       Core Setup
# ====================================================


bess.add_worker(wid=0, core=int(get_process_affinity()[0]))

# ====================================================
#       Port Setup
# ====================================================


def setup_port(ifname, idx, mode):
    print('Setting up port {}'.format(ifname))
    if mode == 'afpkt':
        # Initialize PMDPort
        vdev = "net_af_packet{},iface={}".format(idx, ifname)
        intf_fastp = PMDPort(name="{}_fastp".format(ifname), vdev=vdev)
    elif mode == 'dpdk':
        peer = peer_by_interface(ifname)
        # Initialize PMDPort for kernel and DPDK
        vdev = "net_af_packet{},iface={}".format(idx, peer)
        # Initialize port in/out module for kernel and DPDK
        intf_slowp = PMDPort(name="{}_slowp".format(ifname), vdev=vdev)
        intf_fastp = PMDPort(name="{}_fastp".format(ifname), port_id=idx)
        intf_slowp_pi = __bess_module__("{}_slowp_pi".format(ifname), 'PortInc', port=intf_slowp.name)
        intf_slowp_po = __bess_module__("{}_slowp_po".format(ifname), 'PortOut', port=intf_slowp.name)
    else:
        raise Exception('Invalid mode selected.')

    intf_fastp_pi = __bess_module__("{}_fastp_pi".format(ifname), 'PortInc', port=intf_fastp.name)
    intf_fastp_po = __bess_module__("{}_fastp_po".format(ifname), 'PortOut', port=intf_fastp.name)

    # Initialize BPF to classify incoming traffic to go to kernel or pipeline
    intf_fastp_bpf = __bess_module__("{}_fastp_bpf".format(ifname), 'BPF')
    intf_fastp_bpf.clear()

    # Default drop when no matches
    intf_fastp_pi -> intf_fastp_bpf:0 -> Sink()

    # That's all; if the mode is 'af_packet'
    if mode == 'afpkt':
        return

    # host_ip_filter: tcpdump -i foo 'dst host 198.19.0.1 or 198.18.0.1' -d
    HostGate = 100
    ips = ips_by_interface(ifname)
    host_ip_filter = {"priority": -HostGate, "filter": "dst host "
                      + " or ".join(str(x) for x in ips), "gate": HostGate}

    intf_fastp_bpf.add(filters=[host_ip_filter])

    # Direct control traffic from DPDK to kernel
    intf_fastp_bpf:HostGate -> intf_slowp_po

    # Direct control traffic from kernel to DPDK
    intf_slowp_pi -> intf_fastp_po

    # Limit scheduling slow path RX to 1000 times/second
    tc = "{}_slowp_pi_sched_limit".format(ifname)
    bess.add_tc(tc,
                policy='rate_limit',
                resource='count',
                limit={'count': 1000})
    intf_slowp_pi.attach_task(parent=tc)


setup_port(s1u_ifname, s1u_port_id, get_env('mode'))
setup_port(sgi_ifname, sgi_port_id, get_env('mode'))

# ====================================================
#       Uplink Pipeline
# ====================================================


# TODO: Handle routes for directly connected vs. via next hop differently
sgi_routes::IPLookup()

# Setting filter to detect gtpu traffic
# src net 11.1.1.0 mask 255.255.255.0           # check eNB subnet
# and dst host 11.1.1.1                         # check S/PGWU IP
# and udp dst port 2152                         # check GTPU port
# and (udp[28:4] & 0xffffff00) = 0x10000000     # check UE subnet
GTPUGate = 1
check_enb_subnet = "src net {} mask {}".format(enb_net, enb_mask)
check_spgwu_ip = " and dst host " + \
    " or ".join(str(x) for x in ips_by_interface(s1u_ifname))
check_gtpu_port = " and udp dst port 2152"
check_ue_subnet = " and (udp[28:4] & 0x{}) = 0x{}".format(
    ip2hex(ue_mask), ip2hex(ue_net))

uplink_filter = {"priority": -GTPUGate, "filter": check_enb_subnet +
               check_spgwu_ip + check_gtpu_port + check_ue_subnet, "gate": GTPUGate}
s1u_fastp_bpf.add(filters=[uplink_filter])

s1u_fastp_bpf:GTPUGate -> GetPDU_sgi::GenericDecap(bytes=50) \
    -> sgi_ether_encap::GenericEncap(fields=[
        {'size': 6, 'value': {'value_int': 0x0}},
        {'size': 6, 'value': {'value_int': mac2hex(mac_by_interface(sgi_ifname))}},
        {'size': 2, 'value': {'value_int': 0x0800}}]) \
    -> sgi_routes \
#    -> sgi_default_route::Update(fields=[{'offset': 0, 'size': 6, 'value': mac2hex(sgi_rtr_mac)}]) \
#    -> sgi_fastp_po

# ====================================================
#       Downlink Pipeline
# ====================================================


# TODO: Handle routes for directly connected vs. via next hop differently
s1u_routes::IPLookup()

# Setting filter to detect UE subnet
UEGate = 1
ue_filter = {"priority": -UEGate,
             "filter": "ip dst net {} mask {}".format(ue_net, ue_mask), "gate": UEGate}
sgi_fastp_bpf.add(filters=[ue_filter])

sgi_fastp_bpf:UEGate \
    -> GenericDecap(bytes=14) \
    -> gtpu_encap::GtpuEncap(s1u_sgw_ip=ip2long(ips_by_interface(s1u_ifname)[0])) \
    -> s1u_ether_encap::GenericEncap(fields=[
        {'size': 6, 'value': {'value_int': 0x0}},
        {'size': 6, 'value': {'value_int': mac2hex(mac_by_interface(s1u_ifname))}},
        {'size': 2, 'value': {'value_int': 0x0800}}]) \
    -> L4Checksum() \
    -> IPChecksum() \
    -> s1u_routes
#    -> s1u_default_route::Update(fields=[{'offset': 0, 'size': 6, 'value': mac2hex(s1u_rtr_mac)}]) \
#    -> s1u_fastp_po

# ====================================================
#       SIM_TEST
# ====================================================

import time

def sim_start_test():
    start_teid = 0xf0000000
    start_ue_ip = 0x10000001
    start_enb_ip = 0x0b010181
    max_sessions = 50000
    NG4T_MAX_UE_RAN = 500000
    NG4T_MAX_ENB_RAN = 80

    for i in range(max_sessions):

        # NG4T-based formula to calculate enodeB IP address against a given UE IP address
        # il_trafficgen also uses the same scheme
        # See SimuCPEnbv4Teid(...) in ngic code for more details
        ue_of_ran = i % NG4T_MAX_UE_RAN
        ran = i / NG4T_MAX_UE_RAN
        enb_of_ran = ue_of_ran % NG4T_MAX_ENB_RAN
        enb_idx = ran * NG4T_MAX_ENB_RAN + enb_of_ran

        gtpu_encap.add(teid=start_teid+i, ueaddr=start_ue_ip+i, enodeb_ip=start_enb_ip+enb_idx)

def sim_end_test():
    start_ue_ip = 0x10000001
    max_sessions = 50000

    for i in range(max_sessions):
        gtpu_encap.remove(ueaddr=start_ue_ip+i)

    gtpu_encap.show_records()

### Uncomment the following lines to test with il_trafficgen ###
# Start the test
#sim_start_test()
# Wait for 30 seconds before deleting the session info entries (optional)
#time.sleep(30)
#sim_end_test()
