From 2ff5efa4fe8702eb74cd0e19e4ace0a3d7fe72d6 Mon Sep 17 00:00:00 2001
From: Saikrishna Edupuganti <saikrishna.edupuganti@intel.com>
Date: Mon, 8 Jul 2019 20:36:21 +0000
Subject: [PATCH] DPDK 19.08 rte prefix to ip defines

Signed-off-by: Saikrishna Edupuganti <saikrishna.edupuganti@intel.com>
---
 core/utils/checksum_bench.cc | 10 +++++-----
 core/utils/checksum_test.cc  | 16 ++++++++--------
 2 files changed, 13 insertions(+), 13 deletions(-)

diff --git a/core/utils/checksum_bench.cc b/core/utils/checksum_bench.cc
index c52d54c6..f27d56b0 100644
--- a/core/utils/checksum_bench.cc
+++ b/core/utils/checksum_bench.cc
@@ -126,7 +126,7 @@ BENCHMARK_DEFINE_F(ChecksumFixture, BmIpv4NoOptChecksumDpdk)
     ip->dst = be32_t(GetRandom());
 
     benchmark::DoNotOptimize(
-        rte_ipv4_cksum(reinterpret_cast<const ipv4_hdr *>(ip)));
+        rte_ipv4_cksum(reinterpret_cast<const rte_ipv4_hdr *>(ip)));
   }
 
   state.SetItemsProcessed(state.iterations());
@@ -207,7 +207,7 @@ BENCHMARK_DEFINE_F(ChecksumFixture, BmUdpChecksumDpdk)
     udp->checksum = 0x0000;  // for dpdk
 
     benchmark::DoNotOptimize(
-        rte_ipv4_udptcp_cksum(reinterpret_cast<const ipv4_hdr *>(ip), udp));
+        rte_ipv4_udptcp_cksum(reinterpret_cast<const rte_ipv4_hdr *>(ip), udp));
   }
 
   state.SetItemsProcessed(state.iterations());
@@ -267,7 +267,7 @@ BENCHMARK_DEFINE_F(ChecksumFixture, BmTcpChecksumDpdk)
     tcp->checksum = 0x0000;  // for dpdk
 
     benchmark::DoNotOptimize(
-        rte_ipv4_udptcp_cksum(reinterpret_cast<const ipv4_hdr *>(ip), tcp));
+        rte_ipv4_udptcp_cksum(reinterpret_cast<const rte_ipv4_hdr *>(ip), tcp));
   }
 
   state.SetItemsProcessed(state.iterations());
@@ -391,9 +391,9 @@ BENCHMARK_DEFINE_F(ChecksumFixture, BmSrcIpPortUpdateDpdk)
     // NAT simulation
     // - one update for ip checksum recalcuation
     // - two for tcp checksum
-    ip->checksum = rte_ipv4_cksum(reinterpret_cast<const ipv4_hdr *>(ip));
+    ip->checksum = rte_ipv4_cksum(reinterpret_cast<const rte_ipv4_hdr *>(ip));
     tcp->checksum =
-        rte_ipv4_udptcp_cksum(reinterpret_cast<const ipv4_hdr *>(ip), tcp);
+        rte_ipv4_udptcp_cksum(reinterpret_cast<const rte_ipv4_hdr *>(ip), tcp);
   }
 
   state.SetItemsProcessed(state.iterations());
diff --git a/core/utils/checksum_test.cc b/core/utils/checksum_test.cc
index 3351ce94..ee7ec8d7 100644
--- a/core/utils/checksum_test.cc
+++ b/core/utils/checksum_test.cc
@@ -97,7 +97,7 @@ TEST(ChecksumTest, Ipv4NoOptChecksum) {
   ip->src = be32_t(0x12345678);
   ip->dst = be32_t(0x12347890);
 
-  uint16_t cksum_dpdk = rte_ipv4_cksum(reinterpret_cast<const ipv4_hdr *>(ip));
+  uint16_t cksum_dpdk = rte_ipv4_cksum(reinterpret_cast<const rte_ipv4_hdr *>(ip));
   uint16_t cksum_bess = CalculateIpv4NoOptChecksum(*ip);
   EXPECT_EQ(cksum_dpdk, cksum_bess);
 
@@ -115,7 +115,7 @@ TEST(ChecksumTest, Ipv4NoOptChecksum) {
     ip->src = be32_t(rd.Get());
     ip->dst = be32_t(rd.Get());
 
-    cksum_dpdk = rte_ipv4_cksum(reinterpret_cast<const ipv4_hdr *>(ip));
+    cksum_dpdk = rte_ipv4_cksum(reinterpret_cast<const rte_ipv4_hdr *>(ip));
     cksum_bess = CalculateIpv4NoOptChecksum(*ip);
 
     if (cksum_dpdk == 0xffff) {
@@ -212,7 +212,7 @@ TEST(ChecksumTest, UdpChecksum) {
   udp->length = be16_t(8);
 
   uint16_t cksum_dpdk =
-      rte_ipv4_udptcp_cksum(reinterpret_cast<const ipv4_hdr *>(ip), udp);
+      rte_ipv4_udptcp_cksum(reinterpret_cast<const rte_ipv4_hdr *>(ip), udp);
   uint16_t cksum_bess = CalculateIpv4UdpChecksum(*ip, *udp);
   EXPECT_EQ(cksum_dpdk, cksum_bess);
 
@@ -243,7 +243,7 @@ TEST(ChecksumTest, UdpChecksum) {
     ip->checksum = 0x0000;   // for dpdk
     udp->checksum = 0x0000;  // for dpdk
 
-    cksum_dpdk = rte_ipv4_cksum(reinterpret_cast<const ipv4_hdr *>(ip));
+    cksum_dpdk = rte_ipv4_cksum(reinterpret_cast<const rte_ipv4_hdr *>(ip));
     cksum_bess = CalculateIpv4NoOptChecksum(*ip);
 
     if (cksum_dpdk == 0xffff) {
@@ -257,7 +257,7 @@ TEST(ChecksumTest, UdpChecksum) {
     ip->checksum = cksum_bess;
 
     cksum_dpdk =
-        rte_ipv4_udptcp_cksum(reinterpret_cast<const ipv4_hdr *>(ip), udp);
+        rte_ipv4_udptcp_cksum(reinterpret_cast<const rte_ipv4_hdr *>(ip), udp);
     cksum_bess = CalculateIpv4UdpChecksum(*ip, *udp);
 
     EXPECT_EQ(cksum_dpdk, cksum_bess);
@@ -290,7 +290,7 @@ TEST(ChecksumTest, TcpChecksum) {
   tcp->ack_num = be32_t(0x98461732);
 
   uint16_t cksum_dpdk =
-      rte_ipv4_udptcp_cksum(reinterpret_cast<const ipv4_hdr *>(ip), tcp);
+      rte_ipv4_udptcp_cksum(reinterpret_cast<const rte_ipv4_hdr *>(ip), tcp);
   uint16_t cksum_bess = CalculateIpv4TcpChecksum(*ip, *tcp);
   EXPECT_EQ(cksum_dpdk, cksum_bess);
 
@@ -320,7 +320,7 @@ TEST(ChecksumTest, TcpChecksum) {
     ip->checksum = 0x0000;   // for dpdk
     tcp->checksum = 0x0000;  // for dpdk
 
-    cksum_dpdk = rte_ipv4_cksum(reinterpret_cast<const ipv4_hdr *>(ip));
+    cksum_dpdk = rte_ipv4_cksum(reinterpret_cast<const rte_ipv4_hdr *>(ip));
     cksum_bess = CalculateIpv4NoOptChecksum(*ip);
 
     if (cksum_dpdk == 0xffff) {
@@ -334,7 +334,7 @@ TEST(ChecksumTest, TcpChecksum) {
     ip->checksum = cksum_bess;
 
     cksum_dpdk =
-        rte_ipv4_udptcp_cksum(reinterpret_cast<const ipv4_hdr *>(ip), tcp);
+        rte_ipv4_udptcp_cksum(reinterpret_cast<const rte_ipv4_hdr *>(ip), tcp);
     cksum_bess = CalculateIpv4TcpChecksum(*ip, *tcp);
 
     if (cksum_dpdk == 0xffff) {
-- 
2.17.1

