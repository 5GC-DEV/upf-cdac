From 98563c2ba1eecffcd1cca97d4727bd6e04928386 Mon Sep 17 00:00:00 2001
From: Saikrishna Edupuganti <saikrishna.edupuganti@intel.com>
Date: Fri, 28 Jun 2019 03:13:06 +0000
Subject: [PATCH] DPDK 19.05

---
 core/drivers/pmd.cc | 92 +++++++++++++++++++++++++++++++++++++++++++++
 core/packet_pool.cc | 17 ++++++++-
 2 files changed, 108 insertions(+), 1 deletion(-)

diff --git a/core/drivers/pmd.cc b/core/drivers/pmd.cc
index 3ed68315..a2cfe87f 100644
--- a/core/drivers/pmd.cc
+++ b/core/drivers/pmd.cc
@@ -31,6 +31,7 @@
 #include "pmd.h"
 
 #include <rte_ethdev_pci.h>
+#include <rte_version.h>
 
 #include "../utils/ether.h"
 #include "../utils/format.h"
@@ -48,8 +49,10 @@ static const struct rte_eth_conf default_eth_conf() {
   ret.link_speeds = ETH_LINK_SPEED_AUTONEG;
 
   ret.rxmode.mq_mode = ETH_MQ_RX_RSS;
+#if RTE_VERSION < RTE_VERSION_NUM(18, 5, 0, 0)
   ret.rxmode.ignore_offload_bitfield = 1;
   ret.rxmode.offloads |= DEV_RX_OFFLOAD_CRC_STRIP;
+#endif
   ret.rxmode.offloads |= (SN_HW_RXCSUM ? DEV_RX_OFFLOAD_CHECKSUM : 0x0);
 
   ret.rx_adv_conf.rss_conf = {
@@ -63,12 +66,20 @@ static const struct rte_eth_conf default_eth_conf() {
 }
 
 void PMDPort::InitDriver() {
+#if RTE_VERSION <= RTE_VERSION_NUM(17, 11, 0, 0)
   dpdk_port_t num_dpdk_ports = rte_eth_dev_count();
+#else
+  dpdk_port_t num_dpdk_ports = rte_eth_dev_count_avail();
+#endif
 
   LOG(INFO) << static_cast<int>(num_dpdk_ports)
             << " DPDK PMD ports have been recognized:";
 
   for (dpdk_port_t i = 0; i < num_dpdk_ports; i++) {
+#if RTE_VERSION > RTE_VERSION_NUM(18, 5, 0, 0)
+    const struct rte_pci_device *pci_dev;
+    const struct rte_bus *bus;
+#endif
     struct rte_eth_dev_info dev_info;
     std::string pci_info;
     int numa_node = -1;
@@ -76,6 +87,19 @@ void PMDPort::InitDriver() {
 
     rte_eth_dev_info_get(i, &dev_info);
 
+#if RTE_VERSION > RTE_VERSION_NUM(18, 5, 0, 0)
+    if (dev_info.device) {
+      bus = rte_bus_find_by_device(dev_info.device);
+      if (bus && !strcmp(bus->name, "pci")) {
+	pci_dev = RTE_DEV_TO_PCI(dev_info.device);
+	pci_info = bess::utils::Format(
+	   "%08x:%02hhx:%02hhx.%02hhx %04hx:%04hx  ",
+	   pci_dev->addr.domain, pci_dev->addr.bus,
+	   pci_dev->addr.devid, pci_dev->addr.function,
+	   pci_dev->id.vendor_id, pci_dev->id.device_id);
+      }
+    }
+#else
     if (dev_info.pci_dev) {
       pci_info = bess::utils::Format(
           "%08x:%02hhx:%02hhx.%02hhx %04hx:%04hx  ",
@@ -83,6 +107,7 @@ void PMDPort::InitDriver() {
           dev_info.pci_dev->addr.devid, dev_info.pci_dev->addr.function,
           dev_info.pci_dev->id.vendor_id, dev_info.pci_dev->id.device_id);
     }
+#endif
 
     numa_node = rte_eth_dev_socket_id(static_cast<int>(i));
     rte_eth_macaddr_get(i, reinterpret_cast<ether_addr *>(lladdr.bytes));
@@ -133,17 +158,36 @@ static CommandResponse find_dpdk_port_by_pci_addr(const std::string &pci,
                           "dddd:bb:dd.ff or bb:dd.ff");
   }
 
+#if RTE_VERSION > RTE_VERSION_NUM(18, 5, 0, 0)
+  const struct rte_pci_device *pci_dev;
+  const struct rte_bus *bus;
+  dpdk_port_t num_dpdk_ports = rte_eth_dev_count_avail();
+#else
   dpdk_port_t num_dpdk_ports = rte_eth_dev_count();
+#endif
   for (dpdk_port_t i = 0; i < num_dpdk_ports; i++) {
     struct rte_eth_dev_info dev_info;
     rte_eth_dev_info_get(i, &dev_info);
 
+#if RTE_VERSION > RTE_VERSION_NUM(18, 5, 0, 0)
+    if (dev_info.device) {
+      bus = rte_bus_find_by_device(dev_info.device);
+      if (bus && !strcmp(bus->name, "pci")) {
+	pci_dev = RTE_DEV_TO_PCI(dev_info.device);
+	if (rte_eal_compare_pci_addr(&addr, &pci_dev->addr) == 0) {
+		port_id = i;
+		break;
+	}
+      }
+    }
+#else
     if (dev_info.pci_dev) {
       if (rte_eal_compare_pci_addr(&addr, &dev_info.pci_dev->addr) == 0) {
         port_id = i;
         break;
       }
     }
+#endif
   }
 
   // If still not found, maybe the device has not been attached yet
@@ -153,7 +197,14 @@ static CommandResponse find_dpdk_port_by_pci_addr(const std::string &pci,
     snprintf(name, RTE_ETH_NAME_MAX_LEN, "%08x:%02x:%02x.%02x", addr.domain,
              addr.bus, addr.devid, addr.function);
 
+#if RTE_VERSION < RTE_VERSION_NUM(18, 5, 0, 0)
     ret = rte_eth_dev_attach(name, &port_id);
+#else
+    ret = rte_eal_hotplug_add("pci", name, "");
+    if (ret == 0 && (ret=rte_eth_dev_get_port_by_name(name, &port_id)) != 0) {
+	    rte_eal_hotplug_remove("pci", name);
+    }
+#endif
 
     if (ret < 0) {
       return CommandFailure(ENODEV, "Cannot attach PCI device %s", name);
@@ -181,7 +232,30 @@ static CommandResponse find_dpdk_vdev(const std::string &vdev,
   }
 
   const char *name = vdev.c_str();
+#if RTE_VERSION < RTE_VERSION_NUM(18, 5, 0, 0)
   int ret = rte_eth_dev_attach(name, &port_id);
+#else
+  char vdev_name[RTE_ETH_NAME_MAX_LEN] = "";
+  char vdev_args[RTE_ETH_NAME_MAX_LEN] = "";
+  std::vector <std::string> tokens;
+  std::stringstream check(vdev);
+  std::string intermediate;
+
+  while (getline(check, intermediate, ','))
+      tokens.push_back(intermediate);
+  for (unsigned int i = 0; i < tokens.size(); i++) {
+     if (i == 0)
+       strcpy(vdev_name, tokens[i].c_str());
+     else if (i == 1)
+       strcpy(vdev_args, tokens[i].c_str());
+  }
+  tokens.clear();
+
+  int ret = rte_eal_hotplug_add("vdev", vdev_name, vdev_args);
+
+  if (ret == 0 && (ret=rte_eth_dev_get_port_by_name(vdev_name, &port_id)) != 0)
+	  rte_eal_hotplug_remove("vdev", vdev_name);
+#endif
 
   if (ret < 0) {
     return CommandFailure(ENODEV, "Cannot attach vdev %s", name);
@@ -256,9 +330,14 @@ CommandResponse PMDPort::Init(const bess::pb::PMDPortArg &arg) {
   }
 
   eth_txconf = dev_info.default_txconf;
+#if RTE_VERSION > RTE_VERSION_NUM(18, 5, 0, 0)
+  eth_txconf.offloads = 0x0;
+  eth_conf.rx_adv_conf.rss_conf.rss_hf &= dev_info.flow_type_rss_offloads;
+#else
   eth_txconf.txq_flags = ETH_TXQ_FLAGS_NOVLANOFFL |
                          ETH_TXQ_FLAGS_NOMULTSEGS * (1 - SN_TSO_SG) |
                          ETH_TXQ_FLAGS_NOXSUMS * (1 - SN_HW_TXCSUM);
+#endif
 
   ret = rte_eth_dev_configure(ret_port_id, num_rxq, num_txq, &eth_conf);
   if (ret != 0) {
@@ -372,7 +451,20 @@ void PMDPort::DeInit() {
     int ret;
 
     rte_eth_dev_close(dpdk_port_id_);
+#if RTE_VERSION > RTE_VERSION_NUM(18, 5, 0, 0)
+    const struct rte_bus *bus;
+    struct rte_eth_dev_info dev_info;
+
+    ret = -1;
+    rte_eth_dev_info_get(dpdk_port_id_, &dev_info);
+    if (dev_info.device) {
+	    bus = rte_bus_find_by_device(dev_info.device);
+	    if (bus)
+		    ret = rte_eal_hotplug_remove(bus->name, name);
+    }
+#else
     ret = rte_eth_dev_detach(dpdk_port_id_, name);
+#endif
     if (ret < 0) {
       LOG(WARNING) << "rte_eth_dev_detach(" << static_cast<int>(dpdk_port_id_)
                    << ") failed: " << rte_strerror(-ret);
diff --git a/core/packet_pool.cc b/core/packet_pool.cc
index 7318cee6..980e88cf 100644
--- a/core/packet_pool.cc
+++ b/core/packet_pool.cc
@@ -4,6 +4,7 @@
 
 #include <rte_errno.h>
 #include <rte_mempool.h>
+#include <rte_version.h>
 
 #include "dpdk.h"
 #include "opts.h"
@@ -168,11 +169,17 @@ PlainPacketPool::PlainPacketPool(size_t capacity, int socket_id)
   pool_->flags |= MEMPOOL_F_NO_PHYS_CONTIG;
 
   size_t page_shift = __builtin_ffs(getpagesize());
+#if RTE_VERSION > RTE_VERSION_NUM(17, 11, 0, 0)
+  size_t min_chunk_size, align;
+  ssize_t size = rte_mempool_op_calc_mem_size_default(pool_, pool_->size,
+						      page_shift, &min_chunk_size,
+						      &align);
+#else
   size_t element_size =
       pool_->header_size + pool_->elt_size + pool_->trailer_size;
   size_t size = rte_mempool_xmem_size(pool_->size, element_size, page_shift,
                                       pool_->flags);
-
+#endif
   void *addr = mmap(nullptr, size, PROT_READ | PROT_WRITE,
                     MAP_SHARED | MAP_ANONYMOUS, -1, 0);
   if (addr == MAP_FAILED) {
@@ -203,8 +210,16 @@ BessPacketPool::BessPacketPool(size_t capacity, int socket_id)
 
   while (pool_->populated_size < pool_->size) {
     size_t deficit = pool_->size - pool_->populated_size;
+#if RTE_VERSION > RTE_VERSION_NUM(17, 11, 0, 0)
+  size_t min_chunk_size, align;
+  ssize_t bytes = rte_mempool_op_calc_mem_size_default(pool_, deficit,
+						       page_shift, &min_chunk_size,
+						       &align);
+  (void)element_size;
+#else
     size_t bytes =
         rte_mempool_xmem_size(deficit, element_size, page_shift, pool_->flags);
+#endif
 
     auto [addr, alloced_bytes] = mem_.AllocUpto(bytes);
     if (addr == nullptr) {
-- 
2.17.1

