# vim: syntax=py

from utils import *

# ====================================================
#       Parameters
# ====================================================


s1u_rtr_mac = "68:05:ca:31:fa:7a"
sgi_rtr_mac = "68:05:ca:31:fa:7b"

ue_net = "16.0.0.0"
ue_mask = "255.255.255.0"

enb_net = "11.1.1.0"
enb_mask = "255.255.255.0"

# ====================================================
#       Validate
# ====================================================


if validate_subnet('{}/{}'.format(ue_net, ue_mask)) is False:
    exit(1, 'Invalid UE subnet')

if validate_subnet('{}/{}'.format(ue_net, ue_mask)) is False:
    exit(1, 'Invalid eNB subnet')

# ====================================================
#       Core Setup
# ====================================================


bess.add_worker(wid=0, core=int(get_process_affinity()[0]))

# ====================================================
#       Port Setup
# ====================================================


def setup_port(ifname, idx):
    peer = peer_by_interface(ifname)
    print('Setting up port {}'.format(ifname))

    # Initialize PMDPort for kernel and DPDK
    vdev = "net_af_packet{},iface={}".format(idx, peer)
    intf_kern = PMDPort(name="{}_kern".format(ifname), vdev=vdev)
    intf_dpdk = PMDPort(name="{}_dpdk".format(ifname), port_id=idx)

    # Initialize port in/out module for kernel and DPDK
    intf_kern_pi = __bess_module__("{}_kern_pi".format(ifname), 'PortInc', port=intf_kern.name)
    intf_kern_po = __bess_module__("{}_kern_po".format(ifname), 'PortOut', port=intf_kern.name)
    intf_dpdk_pi = __bess_module__("{}_dpdk_pi".format(ifname), 'PortInc', port=intf_dpdk.name)
    intf_dpdk_po = __bess_module__("{}_dpdk_po".format(ifname), 'PortOut', port=intf_dpdk.name)

    # Initialize BPF to classify incoming traffic to go to kernel or pipeline
    intf_dpdk_bpf = __bess_module__("{}_dpdk_bpf".format(ifname), 'BPF')

    # host_ip_filter: tcpdump -i foo 'dst host 198.19.0.1 or 198.18.0.1' -d
    HostGate = 100
    ips = ips_by_interface(ifname)
    host_ip_filter = {"priority": -HostGate, "filter": "dst host "
                      + " or ".join(str(x) for x in ips), "gate": HostGate}
    intf_dpdk_bpf.clear()
    intf_dpdk_bpf.add(filters=[host_ip_filter])

    # Default drop when no matches
    intf_dpdk_pi -> intf_dpdk_bpf:0 -> Sink()

    # Direct control traffic from DPDK to kernel
    intf_dpdk_bpf:HostGate -> intf_kern_po

    # Direct control traffic from kernel to DPDK
    intf_kern_pi -> intf_dpdk_po

    # Limit scheduling slow path RX to 1000 times/second
    tc = "{}_kern_pi_sched_limit".format(ifname)
    bess.add_tc(tc,
                policy='rate_limit',
                resource='count',
                limit={'count': 1000})
    intf_kern_pi.attach_task(parent=tc)


S1U = "s1u"
SGI = "sgi"
setup_port(S1U, 0)
setup_port(SGI, 1)

# ====================================================
#       Uplink Pipeline
# ====================================================


# TODO: Handle routes for directly connected vs. via next hop differently
sgi_routes::IPLookup()
sgi_routes.add(prefix='0.0.0.0', prefix_len=0, gate=0)

# Setting filter to detect gtpu traffic
# src net 11.1.1.0 mask 255.255.255.0           # check eNB subnet
# and dst host 11.1.1.1                         # check S/PGWU IP
# and udp dst port 2152                         # check GTPU port
# and (udp[28:4] & 0xffffff00) = 0x10000000     # check UE subnet
GTPUGate = 1
check_enb_subnet = "src net {} mask {}".format(enb_net, enb_mask)
check_spgwu_ip = " and dst host " + \
    " or ".join(str(x) for x in ips_by_interface(S1U))
check_gtpu_port = " and udp dst port 2152"
check_ue_subnet = " and (udp[28:4] & 0x{}) = 0x{}".format(
    ip2hex(ue_mask), ip2hex(ue_net))

uplink_filter = {"priority": -GTPUGate, "filter": check_enb_subnet +
               check_spgwu_ip + check_gtpu_port + check_ue_subnet, "gate": GTPUGate}
s1u_dpdk_bpf.add(filters=[uplink_filter])

s1u_dpdk_bpf:GTPUGate -> GetPDU_sgi::GenericDecap(bytes=50) \
    -> sgi_ether_encap::GenericEncap(fields=[
        {'size': 6, 'value': {'value_int': 0x0}},
        {'size': 6, 'value': {'value_int': mac2hex(mac_by_interface(SGI))}},
        {'size': 2, 'value': {'value_int': 0x0800}}]) \
    -> sgi_routes:0 \
    -> sgi_default_route::Update(fields=[{'offset': 0, 'size': 6, 'value': mac2hex(sgi_rtr_mac)}]) \
    -> sgi_dpdk_po

# ====================================================
#       Downlink Pipeline
# ====================================================


# TODO: Handle routes for directly connected vs. via next hop differently
s1u_routes::IPLookup()
s1u_routes.add(prefix='0.0.0.0', prefix_len=0, gate=0)

# Setting filter to detect UE subnet
UEGate = 1
ue_filter = {"priority": -UEGate,
             "filter": "ip dst net {} mask {}".format(ue_net, ue_mask), "gate": UEGate}
sgi_dpdk_bpf.add(filters=[ue_filter])

sgi_dpdk_bpf:UEGate \
    -> GenericDecap(bytes=14) \
    -> gtpu_encap::GtpuEncap() \
    -> s1u_ether_encap::GenericEncap(fields=[
        {'size': 6, 'value': {'value_int': 0x0}},
        {'size': 6, 'value': {'value_int': mac2hex(mac_by_interface(S1U))}},
        {'size': 2, 'value': {'value_int': 0x0800}}]) \
    -> L4Checksum() \
    -> IPChecksum() \
    -> s1u_routes:0 \
    -> s1u_default_route::Update(fields=[{'offset': 0, 'size': 6, 'value': mac2hex(s1u_rtr_mac)}]) \
    -> s1u_dpdk_po
